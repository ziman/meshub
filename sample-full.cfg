[socket]

# listen on this address for UDP packets
address = 0.0.0.0
port    = 3732

# broadcast advertisements on LAN because nat punching often does not work
# when two clients are behind the same router
# address 255.255.255.255,
# ports comma-separated below
lan_advert_ports = 3731, 3732

# internal: select() timeout
#select_interval_sec = 5

[hub]

# address of the hub
address = 1.2.3.4
port    = 3731

# how frequently we should advertise ourselves to the hub
advert_interval_sec = 60

[vpn]

# absolutely optional
# does not affect anything except log messages
# does not even have to be unique
hostname = client

# how frequently we should ping *each* peer
ping_interval_sec = 15
ping_timeout_sec = 300

# maintenance includes purging timed out peer connections etc.
maintenance_interval_sec = 30

# wait before restarting the VPN after network outages etc.
restart_delay_sec = 10

[tun]

# "tun" or "tap"
# default: tun
type = tun

# name of the tun interface
# default: tun%%d   <- note the double percent sign
#
# For Mac OS X, use a full static path: /dev/tun8 or similar.
#
# Linux supports dynamic numbering; use just the name tun-blah%d or just tun-blah,
# without the path.
interface = tun%%d

# address + prefix length of the associated subnet
ipv4_address = 192.168.21.2/24

# Recommended ipv6 address scheme:
# * 8-bit ULA prefix (0xfd)
# * 40-bit routing prefix (randomly generated)
# * 16-bit subnet id
# * 64-bit host id
#
# ipv6_address = fd__:____:____:0001::1/64

[scripts]

# shell scripts
# available variables: $iface, $addr, $prefixlen, $hostname
#
# tun_setup will always be called, and it will be called first (if defined)
# afterwards, ipv4 and ipv6 commands will be executed (in an undefined order)

tun_setup = ip link set $iface up
tun_setup_ipv4 = ip addr add $addr/$prefixlen dev $iface
tun_setup_ipv6 = ip -6 addr add $addr/$prefixlen dev $iface

# On Mac OS X, you can use the following:
#
#tun_setup = /sbin/ifconfig tun8 up
#
#tun_setup_ipv4 =
#	/sbin/ifconfig tun8 192.168.21.2 192.168.21.254;
#	/sbin/route -n add -net 192.168.21.0/24 192.168.21.254
#
#  ^^ the above will fake routing through a point-to-point interface
#     by saying that tun8 is P-to-P to .21.254, and then using .21.254 as the gateway
#     The gateway needn't exist; it's just a hack to convince the OS to route packets through tun8.
#     Once the packet is in the tunnel, the VPN will route it correctly.
#
#tun_setup_ipv6 =
#	/sbin/ifconfig tun8 inet6 alias fd__:____:____:0001::8;
#	/sbin/route -n delete -inet6 fd__:____:____:0001::/64;
#	/sbin/route -n add -inet6 -net fd__:____:____:0001::/64 -interface tun8
#
#  ^^ for some reason, my OSX adds a strange route for the /64 subnet
#     this script deletes it and sets an explicit route via tun8

[encryption]

# scheme = fernet|null
scheme = fernet

# generate a PSK using generate_fernet_key.py
psk = <generate your own using ./generate_fernet_key.py>

# xxx HACK xxx
# comma-separated list of ports that should not be encrypted
# this is meant to alleviate problems with CPU usage
# when running high-volume data through the VPN (e.g. rsync backups)
#
# default: none
unencrypted_tcp_ports = 22
unencrypted_udp_ports = 1194
